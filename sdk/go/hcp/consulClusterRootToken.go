// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-hcp/sdk/go/hcp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := hcp.NewConsulClusterRootToken(ctx, "example", &hcp.ConsulClusterRootTokenArgs{
//				ClusterId: pulumi.String("consul-cluster"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConsulClusterRootToken struct {
	pulumi.CustomResourceState

	// The accessor ID of the root ACL token.
	AccessorId pulumi.StringOutput `pulumi:"accessorId"`
	// The ID of the HCP Consul cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The root ACL token Base64 encoded in a Kubernetes secret.
	KubernetesSecret pulumi.StringOutput `pulumi:"kubernetesSecret"`
	// The secret ID of the root ACL token.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
}

// NewConsulClusterRootToken registers a new resource with the given unique name, arguments, and options.
func NewConsulClusterRootToken(ctx *pulumi.Context,
	name string, args *ConsulClusterRootTokenArgs, opts ...pulumi.ResourceOption) (*ConsulClusterRootToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConsulClusterRootToken
	err := ctx.RegisterResource("hcp:index/consulClusterRootToken:ConsulClusterRootToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsulClusterRootToken gets an existing ConsulClusterRootToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsulClusterRootToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsulClusterRootTokenState, opts ...pulumi.ResourceOption) (*ConsulClusterRootToken, error) {
	var resource ConsulClusterRootToken
	err := ctx.ReadResource("hcp:index/consulClusterRootToken:ConsulClusterRootToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsulClusterRootToken resources.
type consulClusterRootTokenState struct {
	// The accessor ID of the root ACL token.
	AccessorId *string `pulumi:"accessorId"`
	// The ID of the HCP Consul cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The root ACL token Base64 encoded in a Kubernetes secret.
	KubernetesSecret *string `pulumi:"kubernetesSecret"`
	// The secret ID of the root ACL token.
	SecretId *string `pulumi:"secretId"`
}

type ConsulClusterRootTokenState struct {
	// The accessor ID of the root ACL token.
	AccessorId pulumi.StringPtrInput
	// The ID of the HCP Consul cluster.
	ClusterId pulumi.StringPtrInput
	// The root ACL token Base64 encoded in a Kubernetes secret.
	KubernetesSecret pulumi.StringPtrInput
	// The secret ID of the root ACL token.
	SecretId pulumi.StringPtrInput
}

func (ConsulClusterRootTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*consulClusterRootTokenState)(nil)).Elem()
}

type consulClusterRootTokenArgs struct {
	// The ID of the HCP Consul cluster.
	ClusterId string `pulumi:"clusterId"`
}

// The set of arguments for constructing a ConsulClusterRootToken resource.
type ConsulClusterRootTokenArgs struct {
	// The ID of the HCP Consul cluster.
	ClusterId pulumi.StringInput
}

func (ConsulClusterRootTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consulClusterRootTokenArgs)(nil)).Elem()
}

type ConsulClusterRootTokenInput interface {
	pulumi.Input

	ToConsulClusterRootTokenOutput() ConsulClusterRootTokenOutput
	ToConsulClusterRootTokenOutputWithContext(ctx context.Context) ConsulClusterRootTokenOutput
}

func (*ConsulClusterRootToken) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsulClusterRootToken)(nil)).Elem()
}

func (i *ConsulClusterRootToken) ToConsulClusterRootTokenOutput() ConsulClusterRootTokenOutput {
	return i.ToConsulClusterRootTokenOutputWithContext(context.Background())
}

func (i *ConsulClusterRootToken) ToConsulClusterRootTokenOutputWithContext(ctx context.Context) ConsulClusterRootTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulClusterRootTokenOutput)
}

// ConsulClusterRootTokenArrayInput is an input type that accepts ConsulClusterRootTokenArray and ConsulClusterRootTokenArrayOutput values.
// You can construct a concrete instance of `ConsulClusterRootTokenArrayInput` via:
//
//	ConsulClusterRootTokenArray{ ConsulClusterRootTokenArgs{...} }
type ConsulClusterRootTokenArrayInput interface {
	pulumi.Input

	ToConsulClusterRootTokenArrayOutput() ConsulClusterRootTokenArrayOutput
	ToConsulClusterRootTokenArrayOutputWithContext(context.Context) ConsulClusterRootTokenArrayOutput
}

type ConsulClusterRootTokenArray []ConsulClusterRootTokenInput

func (ConsulClusterRootTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsulClusterRootToken)(nil)).Elem()
}

func (i ConsulClusterRootTokenArray) ToConsulClusterRootTokenArrayOutput() ConsulClusterRootTokenArrayOutput {
	return i.ToConsulClusterRootTokenArrayOutputWithContext(context.Background())
}

func (i ConsulClusterRootTokenArray) ToConsulClusterRootTokenArrayOutputWithContext(ctx context.Context) ConsulClusterRootTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulClusterRootTokenArrayOutput)
}

// ConsulClusterRootTokenMapInput is an input type that accepts ConsulClusterRootTokenMap and ConsulClusterRootTokenMapOutput values.
// You can construct a concrete instance of `ConsulClusterRootTokenMapInput` via:
//
//	ConsulClusterRootTokenMap{ "key": ConsulClusterRootTokenArgs{...} }
type ConsulClusterRootTokenMapInput interface {
	pulumi.Input

	ToConsulClusterRootTokenMapOutput() ConsulClusterRootTokenMapOutput
	ToConsulClusterRootTokenMapOutputWithContext(context.Context) ConsulClusterRootTokenMapOutput
}

type ConsulClusterRootTokenMap map[string]ConsulClusterRootTokenInput

func (ConsulClusterRootTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsulClusterRootToken)(nil)).Elem()
}

func (i ConsulClusterRootTokenMap) ToConsulClusterRootTokenMapOutput() ConsulClusterRootTokenMapOutput {
	return i.ToConsulClusterRootTokenMapOutputWithContext(context.Background())
}

func (i ConsulClusterRootTokenMap) ToConsulClusterRootTokenMapOutputWithContext(ctx context.Context) ConsulClusterRootTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulClusterRootTokenMapOutput)
}

type ConsulClusterRootTokenOutput struct{ *pulumi.OutputState }

func (ConsulClusterRootTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsulClusterRootToken)(nil)).Elem()
}

func (o ConsulClusterRootTokenOutput) ToConsulClusterRootTokenOutput() ConsulClusterRootTokenOutput {
	return o
}

func (o ConsulClusterRootTokenOutput) ToConsulClusterRootTokenOutputWithContext(ctx context.Context) ConsulClusterRootTokenOutput {
	return o
}

// The accessor ID of the root ACL token.
func (o ConsulClusterRootTokenOutput) AccessorId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulClusterRootToken) pulumi.StringOutput { return v.AccessorId }).(pulumi.StringOutput)
}

// The ID of the HCP Consul cluster.
func (o ConsulClusterRootTokenOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulClusterRootToken) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The root ACL token Base64 encoded in a Kubernetes secret.
func (o ConsulClusterRootTokenOutput) KubernetesSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulClusterRootToken) pulumi.StringOutput { return v.KubernetesSecret }).(pulumi.StringOutput)
}

// The secret ID of the root ACL token.
func (o ConsulClusterRootTokenOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulClusterRootToken) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

type ConsulClusterRootTokenArrayOutput struct{ *pulumi.OutputState }

func (ConsulClusterRootTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsulClusterRootToken)(nil)).Elem()
}

func (o ConsulClusterRootTokenArrayOutput) ToConsulClusterRootTokenArrayOutput() ConsulClusterRootTokenArrayOutput {
	return o
}

func (o ConsulClusterRootTokenArrayOutput) ToConsulClusterRootTokenArrayOutputWithContext(ctx context.Context) ConsulClusterRootTokenArrayOutput {
	return o
}

func (o ConsulClusterRootTokenArrayOutput) Index(i pulumi.IntInput) ConsulClusterRootTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsulClusterRootToken {
		return vs[0].([]*ConsulClusterRootToken)[vs[1].(int)]
	}).(ConsulClusterRootTokenOutput)
}

type ConsulClusterRootTokenMapOutput struct{ *pulumi.OutputState }

func (ConsulClusterRootTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsulClusterRootToken)(nil)).Elem()
}

func (o ConsulClusterRootTokenMapOutput) ToConsulClusterRootTokenMapOutput() ConsulClusterRootTokenMapOutput {
	return o
}

func (o ConsulClusterRootTokenMapOutput) ToConsulClusterRootTokenMapOutputWithContext(ctx context.Context) ConsulClusterRootTokenMapOutput {
	return o
}

func (o ConsulClusterRootTokenMapOutput) MapIndex(k pulumi.StringInput) ConsulClusterRootTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsulClusterRootToken {
		return vs[0].(map[string]*ConsulClusterRootToken)[vs[1].(string)]
	}).(ConsulClusterRootTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsulClusterRootTokenInput)(nil)).Elem(), &ConsulClusterRootToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsulClusterRootTokenArrayInput)(nil)).Elem(), ConsulClusterRootTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsulClusterRootTokenMapInput)(nil)).Elem(), ConsulClusterRootTokenMap{})
	pulumi.RegisterOutputType(ConsulClusterRootTokenOutput{})
	pulumi.RegisterOutputType(ConsulClusterRootTokenArrayOutput{})
	pulumi.RegisterOutputType(ConsulClusterRootTokenMapOutput{})
}

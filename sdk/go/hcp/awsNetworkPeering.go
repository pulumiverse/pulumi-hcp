// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The AWS network peering resource allows you to manage a network peering between an HVN and a peer AWS VPC.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
//	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-hcp/sdk/go/hcp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := hcp.NewHvn(ctx, "main", &hcp.HvnArgs{
//				HvnId:         pulumi.String("main-hvn"),
//				CloudProvider: pulumi.String("aws"),
//				Region:        pulumi.String("us-west-2"),
//				CidrBlock:     pulumi.String("172.25.16.0/20"),
//			})
//			if err != nil {
//				return err
//			}
//			peerVpc, err := ec2.NewVpc(ctx, "peerVpc", &ec2.VpcArgs{
//				CidrBlock: pulumi.String("172.31.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			peerArn := aws.GetArnOutput(ctx, GetArnOutputArgs{
//				Arn: peerVpc.Arn,
//			}, nil)
//			dev, err := hcp.NewAwsNetworkPeering(ctx, "dev", &hcp.AwsNetworkPeeringArgs{
//				HvnId:         main.HvnId,
//				PeeringId:     pulumi.String("dev"),
//				PeerVpcId:     peerVpc.ID(),
//				PeerAccountId: peerVpc.OwnerId,
//				PeerVpcRegion: peerArn.ApplyT(func(peerArn GetArnResult) (string, error) {
//					return peerArn.Region, nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = hcp.NewHvnRoute(ctx, "main-to-dev", &hcp.HvnRouteArgs{
//				HvnLink:         main.SelfLink,
//				HvnRouteId:      pulumi.String("main-to-dev"),
//				DestinationCidr: pulumi.String("172.31.0.0/16"),
//				TargetLink:      dev.SelfLink,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewVpcPeeringConnectionAccepter(ctx, "peerVpcPeeringConnectionAccepter", &ec2.VpcPeeringConnectionAccepterArgs{
//				VpcPeeringConnectionId: dev.ProviderPeeringId,
//				AutoAccept:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # The import ID is {hvn_id}:{peering_id}
//
// ```sh
//
//	$ pulumi import hcp:index/awsNetworkPeering:AwsNetworkPeering peer main-hvn:11eb60b3-d4ec-5eed-aacc-0242ac120015
//
// ```
type AwsNetworkPeering struct {
	pulumi.CustomResourceState

	// The time that the network peering was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The time after which the network peering will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// The ID of the HashiCorp Virtual Network (HVN).
	HvnId pulumi.StringOutput `pulumi:"hvnId"`
	// The ID of the HCP organization where the network peering is located. Always matches the HVN's organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The account ID of the peer VPC in AWS.
	PeerAccountId pulumi.StringOutput `pulumi:"peerAccountId"`
	// The ID of the peer VPC in AWS.
	PeerVpcId pulumi.StringOutput `pulumi:"peerVpcId"`
	// The region of the peer VPC in AWS.
	PeerVpcRegion pulumi.StringOutput `pulumi:"peerVpcRegion"`
	// The ID of the network peering.
	PeeringId pulumi.StringOutput `pulumi:"peeringId"`
	// The ID of the HCP project where the network peering is located. Always matches the HVN's project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The peering connection ID used by AWS.
	ProviderPeeringId pulumi.StringOutput `pulumi:"providerPeeringId"`
	// A unique URL identifying the network peering.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// The state of the network peering.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewAwsNetworkPeering registers a new resource with the given unique name, arguments, and options.
func NewAwsNetworkPeering(ctx *pulumi.Context,
	name string, args *AwsNetworkPeeringArgs, opts ...pulumi.ResourceOption) (*AwsNetworkPeering, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HvnId == nil {
		return nil, errors.New("invalid value for required argument 'HvnId'")
	}
	if args.PeerAccountId == nil {
		return nil, errors.New("invalid value for required argument 'PeerAccountId'")
	}
	if args.PeerVpcId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcId'")
	}
	if args.PeerVpcRegion == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcRegion'")
	}
	if args.PeeringId == nil {
		return nil, errors.New("invalid value for required argument 'PeeringId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AwsNetworkPeering
	err := ctx.RegisterResource("hcp:index/awsNetworkPeering:AwsNetworkPeering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsNetworkPeering gets an existing AwsNetworkPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsNetworkPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsNetworkPeeringState, opts ...pulumi.ResourceOption) (*AwsNetworkPeering, error) {
	var resource AwsNetworkPeering
	err := ctx.ReadResource("hcp:index/awsNetworkPeering:AwsNetworkPeering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsNetworkPeering resources.
type awsNetworkPeeringState struct {
	// The time that the network peering was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The time after which the network peering will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
	ExpiresAt *string `pulumi:"expiresAt"`
	// The ID of the HashiCorp Virtual Network (HVN).
	HvnId *string `pulumi:"hvnId"`
	// The ID of the HCP organization where the network peering is located. Always matches the HVN's organization.
	OrganizationId *string `pulumi:"organizationId"`
	// The account ID of the peer VPC in AWS.
	PeerAccountId *string `pulumi:"peerAccountId"`
	// The ID of the peer VPC in AWS.
	PeerVpcId *string `pulumi:"peerVpcId"`
	// The region of the peer VPC in AWS.
	PeerVpcRegion *string `pulumi:"peerVpcRegion"`
	// The ID of the network peering.
	PeeringId *string `pulumi:"peeringId"`
	// The ID of the HCP project where the network peering is located. Always matches the HVN's project.
	ProjectId *string `pulumi:"projectId"`
	// The peering connection ID used by AWS.
	ProviderPeeringId *string `pulumi:"providerPeeringId"`
	// A unique URL identifying the network peering.
	SelfLink *string `pulumi:"selfLink"`
	// The state of the network peering.
	State *string `pulumi:"state"`
}

type AwsNetworkPeeringState struct {
	// The time that the network peering was created.
	CreatedAt pulumi.StringPtrInput
	// The time after which the network peering will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
	ExpiresAt pulumi.StringPtrInput
	// The ID of the HashiCorp Virtual Network (HVN).
	HvnId pulumi.StringPtrInput
	// The ID of the HCP organization where the network peering is located. Always matches the HVN's organization.
	OrganizationId pulumi.StringPtrInput
	// The account ID of the peer VPC in AWS.
	PeerAccountId pulumi.StringPtrInput
	// The ID of the peer VPC in AWS.
	PeerVpcId pulumi.StringPtrInput
	// The region of the peer VPC in AWS.
	PeerVpcRegion pulumi.StringPtrInput
	// The ID of the network peering.
	PeeringId pulumi.StringPtrInput
	// The ID of the HCP project where the network peering is located. Always matches the HVN's project.
	ProjectId pulumi.StringPtrInput
	// The peering connection ID used by AWS.
	ProviderPeeringId pulumi.StringPtrInput
	// A unique URL identifying the network peering.
	SelfLink pulumi.StringPtrInput
	// The state of the network peering.
	State pulumi.StringPtrInput
}

func (AwsNetworkPeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsNetworkPeeringState)(nil)).Elem()
}

type awsNetworkPeeringArgs struct {
	// The ID of the HashiCorp Virtual Network (HVN).
	HvnId string `pulumi:"hvnId"`
	// The account ID of the peer VPC in AWS.
	PeerAccountId string `pulumi:"peerAccountId"`
	// The ID of the peer VPC in AWS.
	PeerVpcId string `pulumi:"peerVpcId"`
	// The region of the peer VPC in AWS.
	PeerVpcRegion string `pulumi:"peerVpcRegion"`
	// The ID of the network peering.
	PeeringId string `pulumi:"peeringId"`
}

// The set of arguments for constructing a AwsNetworkPeering resource.
type AwsNetworkPeeringArgs struct {
	// The ID of the HashiCorp Virtual Network (HVN).
	HvnId pulumi.StringInput
	// The account ID of the peer VPC in AWS.
	PeerAccountId pulumi.StringInput
	// The ID of the peer VPC in AWS.
	PeerVpcId pulumi.StringInput
	// The region of the peer VPC in AWS.
	PeerVpcRegion pulumi.StringInput
	// The ID of the network peering.
	PeeringId pulumi.StringInput
}

func (AwsNetworkPeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsNetworkPeeringArgs)(nil)).Elem()
}

type AwsNetworkPeeringInput interface {
	pulumi.Input

	ToAwsNetworkPeeringOutput() AwsNetworkPeeringOutput
	ToAwsNetworkPeeringOutputWithContext(ctx context.Context) AwsNetworkPeeringOutput
}

func (*AwsNetworkPeering) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsNetworkPeering)(nil)).Elem()
}

func (i *AwsNetworkPeering) ToAwsNetworkPeeringOutput() AwsNetworkPeeringOutput {
	return i.ToAwsNetworkPeeringOutputWithContext(context.Background())
}

func (i *AwsNetworkPeering) ToAwsNetworkPeeringOutputWithContext(ctx context.Context) AwsNetworkPeeringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsNetworkPeeringOutput)
}

// AwsNetworkPeeringArrayInput is an input type that accepts AwsNetworkPeeringArray and AwsNetworkPeeringArrayOutput values.
// You can construct a concrete instance of `AwsNetworkPeeringArrayInput` via:
//
//	AwsNetworkPeeringArray{ AwsNetworkPeeringArgs{...} }
type AwsNetworkPeeringArrayInput interface {
	pulumi.Input

	ToAwsNetworkPeeringArrayOutput() AwsNetworkPeeringArrayOutput
	ToAwsNetworkPeeringArrayOutputWithContext(context.Context) AwsNetworkPeeringArrayOutput
}

type AwsNetworkPeeringArray []AwsNetworkPeeringInput

func (AwsNetworkPeeringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsNetworkPeering)(nil)).Elem()
}

func (i AwsNetworkPeeringArray) ToAwsNetworkPeeringArrayOutput() AwsNetworkPeeringArrayOutput {
	return i.ToAwsNetworkPeeringArrayOutputWithContext(context.Background())
}

func (i AwsNetworkPeeringArray) ToAwsNetworkPeeringArrayOutputWithContext(ctx context.Context) AwsNetworkPeeringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsNetworkPeeringArrayOutput)
}

// AwsNetworkPeeringMapInput is an input type that accepts AwsNetworkPeeringMap and AwsNetworkPeeringMapOutput values.
// You can construct a concrete instance of `AwsNetworkPeeringMapInput` via:
//
//	AwsNetworkPeeringMap{ "key": AwsNetworkPeeringArgs{...} }
type AwsNetworkPeeringMapInput interface {
	pulumi.Input

	ToAwsNetworkPeeringMapOutput() AwsNetworkPeeringMapOutput
	ToAwsNetworkPeeringMapOutputWithContext(context.Context) AwsNetworkPeeringMapOutput
}

type AwsNetworkPeeringMap map[string]AwsNetworkPeeringInput

func (AwsNetworkPeeringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsNetworkPeering)(nil)).Elem()
}

func (i AwsNetworkPeeringMap) ToAwsNetworkPeeringMapOutput() AwsNetworkPeeringMapOutput {
	return i.ToAwsNetworkPeeringMapOutputWithContext(context.Background())
}

func (i AwsNetworkPeeringMap) ToAwsNetworkPeeringMapOutputWithContext(ctx context.Context) AwsNetworkPeeringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsNetworkPeeringMapOutput)
}

type AwsNetworkPeeringOutput struct{ *pulumi.OutputState }

func (AwsNetworkPeeringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsNetworkPeering)(nil)).Elem()
}

func (o AwsNetworkPeeringOutput) ToAwsNetworkPeeringOutput() AwsNetworkPeeringOutput {
	return o
}

func (o AwsNetworkPeeringOutput) ToAwsNetworkPeeringOutputWithContext(ctx context.Context) AwsNetworkPeeringOutput {
	return o
}

// The time that the network peering was created.
func (o AwsNetworkPeeringOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The time after which the network peering will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
func (o AwsNetworkPeeringOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The ID of the HashiCorp Virtual Network (HVN).
func (o AwsNetworkPeeringOutput) HvnId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.HvnId }).(pulumi.StringOutput)
}

// The ID of the HCP organization where the network peering is located. Always matches the HVN's organization.
func (o AwsNetworkPeeringOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The account ID of the peer VPC in AWS.
func (o AwsNetworkPeeringOutput) PeerAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.PeerAccountId }).(pulumi.StringOutput)
}

// The ID of the peer VPC in AWS.
func (o AwsNetworkPeeringOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.PeerVpcId }).(pulumi.StringOutput)
}

// The region of the peer VPC in AWS.
func (o AwsNetworkPeeringOutput) PeerVpcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.PeerVpcRegion }).(pulumi.StringOutput)
}

// The ID of the network peering.
func (o AwsNetworkPeeringOutput) PeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.PeeringId }).(pulumi.StringOutput)
}

// The ID of the HCP project where the network peering is located. Always matches the HVN's project.
func (o AwsNetworkPeeringOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The peering connection ID used by AWS.
func (o AwsNetworkPeeringOutput) ProviderPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.ProviderPeeringId }).(pulumi.StringOutput)
}

// A unique URL identifying the network peering.
func (o AwsNetworkPeeringOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// The state of the network peering.
func (o AwsNetworkPeeringOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsNetworkPeering) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type AwsNetworkPeeringArrayOutput struct{ *pulumi.OutputState }

func (AwsNetworkPeeringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsNetworkPeering)(nil)).Elem()
}

func (o AwsNetworkPeeringArrayOutput) ToAwsNetworkPeeringArrayOutput() AwsNetworkPeeringArrayOutput {
	return o
}

func (o AwsNetworkPeeringArrayOutput) ToAwsNetworkPeeringArrayOutputWithContext(ctx context.Context) AwsNetworkPeeringArrayOutput {
	return o
}

func (o AwsNetworkPeeringArrayOutput) Index(i pulumi.IntInput) AwsNetworkPeeringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsNetworkPeering {
		return vs[0].([]*AwsNetworkPeering)[vs[1].(int)]
	}).(AwsNetworkPeeringOutput)
}

type AwsNetworkPeeringMapOutput struct{ *pulumi.OutputState }

func (AwsNetworkPeeringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsNetworkPeering)(nil)).Elem()
}

func (o AwsNetworkPeeringMapOutput) ToAwsNetworkPeeringMapOutput() AwsNetworkPeeringMapOutput {
	return o
}

func (o AwsNetworkPeeringMapOutput) ToAwsNetworkPeeringMapOutputWithContext(ctx context.Context) AwsNetworkPeeringMapOutput {
	return o
}

func (o AwsNetworkPeeringMapOutput) MapIndex(k pulumi.StringInput) AwsNetworkPeeringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsNetworkPeering {
		return vs[0].(map[string]*AwsNetworkPeering)[vs[1].(string)]
	}).(AwsNetworkPeeringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsNetworkPeeringInput)(nil)).Elem(), &AwsNetworkPeering{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsNetworkPeeringArrayInput)(nil)).Elem(), AwsNetworkPeeringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsNetworkPeeringMapInput)(nil)).Elem(), AwsNetworkPeeringMap{})
	pulumi.RegisterOutputType(AwsNetworkPeeringOutput{})
	pulumi.RegisterOutputType(AwsNetworkPeeringArrayOutput{})
	pulumi.RegisterOutputType(AwsNetworkPeeringMapOutput{})
}

// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Consul snapshot resource allows users to manage Consul snapshots of an HCP Consul cluster. Snapshots currently have a retention policy of 30 days.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-hcp/sdk/go/hcp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := hcp.NewConsulSnapshot(ctx, "example", &hcp.ConsulSnapshotArgs{
//				ClusterId:    pulumi.String("consul-cluster"),
//				SnapshotName: pulumi.String("my-snapshot"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConsulSnapshot struct {
	pulumi.CustomResourceState

	// The ID of the HCP Consul cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The version of Consul at the time of snapshot creation.
	ConsulVersion pulumi.StringOutput `pulumi:"consulVersion"`
	// The ID of the HCP organization where the project the HCP Consul cluster is located.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
	// The ID of the project the HCP Consul cluster is located.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Timestamp of when the snapshot was restored. If the snapshot has not been restored, this field will be blank.
	RestoredAt pulumi.StringOutput `pulumi:"restoredAt"`
	// The size of the snapshot in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The ID of the Consul snapshot
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// The name of the snapshot.
	SnapshotName pulumi.StringOutput `pulumi:"snapshotName"`
	// The state of an HCP Consul snapshot.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewConsulSnapshot registers a new resource with the given unique name, arguments, and options.
func NewConsulSnapshot(ctx *pulumi.Context,
	name string, args *ConsulSnapshotArgs, opts ...pulumi.ResourceOption) (*ConsulSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.SnapshotName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConsulSnapshot
	err := ctx.RegisterResource("hcp:index/consulSnapshot:ConsulSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsulSnapshot gets an existing ConsulSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsulSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsulSnapshotState, opts ...pulumi.ResourceOption) (*ConsulSnapshot, error) {
	var resource ConsulSnapshot
	err := ctx.ReadResource("hcp:index/consulSnapshot:ConsulSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsulSnapshot resources.
type consulSnapshotState struct {
	// The ID of the HCP Consul cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The version of Consul at the time of snapshot creation.
	ConsulVersion *string `pulumi:"consulVersion"`
	// The ID of the HCP organization where the project the HCP Consul cluster is located.
	OrganizationId *string `pulumi:"organizationId"`
	// The ID of the project the HCP Consul cluster is located.
	ProjectId *string `pulumi:"projectId"`
	// Timestamp of when the snapshot was restored. If the snapshot has not been restored, this field will be blank.
	RestoredAt *string `pulumi:"restoredAt"`
	// The size of the snapshot in bytes.
	Size *int `pulumi:"size"`
	// The ID of the Consul snapshot
	SnapshotId *string `pulumi:"snapshotId"`
	// The name of the snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
	// The state of an HCP Consul snapshot.
	State *string `pulumi:"state"`
}

type ConsulSnapshotState struct {
	// The ID of the HCP Consul cluster.
	ClusterId pulumi.StringPtrInput
	// The version of Consul at the time of snapshot creation.
	ConsulVersion pulumi.StringPtrInput
	// The ID of the HCP organization where the project the HCP Consul cluster is located.
	OrganizationId pulumi.StringPtrInput
	// The ID of the project the HCP Consul cluster is located.
	ProjectId pulumi.StringPtrInput
	// Timestamp of when the snapshot was restored. If the snapshot has not been restored, this field will be blank.
	RestoredAt pulumi.StringPtrInput
	// The size of the snapshot in bytes.
	Size pulumi.IntPtrInput
	// The ID of the Consul snapshot
	SnapshotId pulumi.StringPtrInput
	// The name of the snapshot.
	SnapshotName pulumi.StringPtrInput
	// The state of an HCP Consul snapshot.
	State pulumi.StringPtrInput
}

func (ConsulSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*consulSnapshotState)(nil)).Elem()
}

type consulSnapshotArgs struct {
	// The ID of the HCP Consul cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the snapshot.
	SnapshotName string `pulumi:"snapshotName"`
}

// The set of arguments for constructing a ConsulSnapshot resource.
type ConsulSnapshotArgs struct {
	// The ID of the HCP Consul cluster.
	ClusterId pulumi.StringInput
	// The name of the snapshot.
	SnapshotName pulumi.StringInput
}

func (ConsulSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consulSnapshotArgs)(nil)).Elem()
}

type ConsulSnapshotInput interface {
	pulumi.Input

	ToConsulSnapshotOutput() ConsulSnapshotOutput
	ToConsulSnapshotOutputWithContext(ctx context.Context) ConsulSnapshotOutput
}

func (*ConsulSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsulSnapshot)(nil)).Elem()
}

func (i *ConsulSnapshot) ToConsulSnapshotOutput() ConsulSnapshotOutput {
	return i.ToConsulSnapshotOutputWithContext(context.Background())
}

func (i *ConsulSnapshot) ToConsulSnapshotOutputWithContext(ctx context.Context) ConsulSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulSnapshotOutput)
}

// ConsulSnapshotArrayInput is an input type that accepts ConsulSnapshotArray and ConsulSnapshotArrayOutput values.
// You can construct a concrete instance of `ConsulSnapshotArrayInput` via:
//
//	ConsulSnapshotArray{ ConsulSnapshotArgs{...} }
type ConsulSnapshotArrayInput interface {
	pulumi.Input

	ToConsulSnapshotArrayOutput() ConsulSnapshotArrayOutput
	ToConsulSnapshotArrayOutputWithContext(context.Context) ConsulSnapshotArrayOutput
}

type ConsulSnapshotArray []ConsulSnapshotInput

func (ConsulSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsulSnapshot)(nil)).Elem()
}

func (i ConsulSnapshotArray) ToConsulSnapshotArrayOutput() ConsulSnapshotArrayOutput {
	return i.ToConsulSnapshotArrayOutputWithContext(context.Background())
}

func (i ConsulSnapshotArray) ToConsulSnapshotArrayOutputWithContext(ctx context.Context) ConsulSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulSnapshotArrayOutput)
}

// ConsulSnapshotMapInput is an input type that accepts ConsulSnapshotMap and ConsulSnapshotMapOutput values.
// You can construct a concrete instance of `ConsulSnapshotMapInput` via:
//
//	ConsulSnapshotMap{ "key": ConsulSnapshotArgs{...} }
type ConsulSnapshotMapInput interface {
	pulumi.Input

	ToConsulSnapshotMapOutput() ConsulSnapshotMapOutput
	ToConsulSnapshotMapOutputWithContext(context.Context) ConsulSnapshotMapOutput
}

type ConsulSnapshotMap map[string]ConsulSnapshotInput

func (ConsulSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsulSnapshot)(nil)).Elem()
}

func (i ConsulSnapshotMap) ToConsulSnapshotMapOutput() ConsulSnapshotMapOutput {
	return i.ToConsulSnapshotMapOutputWithContext(context.Background())
}

func (i ConsulSnapshotMap) ToConsulSnapshotMapOutputWithContext(ctx context.Context) ConsulSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsulSnapshotMapOutput)
}

type ConsulSnapshotOutput struct{ *pulumi.OutputState }

func (ConsulSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsulSnapshot)(nil)).Elem()
}

func (o ConsulSnapshotOutput) ToConsulSnapshotOutput() ConsulSnapshotOutput {
	return o
}

func (o ConsulSnapshotOutput) ToConsulSnapshotOutputWithContext(ctx context.Context) ConsulSnapshotOutput {
	return o
}

// The ID of the HCP Consul cluster.
func (o ConsulSnapshotOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The version of Consul at the time of snapshot creation.
func (o ConsulSnapshotOutput) ConsulVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.ConsulVersion }).(pulumi.StringOutput)
}

// The ID of the HCP organization where the project the HCP Consul cluster is located.
func (o ConsulSnapshotOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

// The ID of the project the HCP Consul cluster is located.
func (o ConsulSnapshotOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Timestamp of when the snapshot was restored. If the snapshot has not been restored, this field will be blank.
func (o ConsulSnapshotOutput) RestoredAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.RestoredAt }).(pulumi.StringOutput)
}

// The size of the snapshot in bytes.
func (o ConsulSnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The ID of the Consul snapshot
func (o ConsulSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// The name of the snapshot.
func (o ConsulSnapshotOutput) SnapshotName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.SnapshotName }).(pulumi.StringOutput)
}

// The state of an HCP Consul snapshot.
func (o ConsulSnapshotOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsulSnapshot) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type ConsulSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ConsulSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsulSnapshot)(nil)).Elem()
}

func (o ConsulSnapshotArrayOutput) ToConsulSnapshotArrayOutput() ConsulSnapshotArrayOutput {
	return o
}

func (o ConsulSnapshotArrayOutput) ToConsulSnapshotArrayOutputWithContext(ctx context.Context) ConsulSnapshotArrayOutput {
	return o
}

func (o ConsulSnapshotArrayOutput) Index(i pulumi.IntInput) ConsulSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsulSnapshot {
		return vs[0].([]*ConsulSnapshot)[vs[1].(int)]
	}).(ConsulSnapshotOutput)
}

type ConsulSnapshotMapOutput struct{ *pulumi.OutputState }

func (ConsulSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsulSnapshot)(nil)).Elem()
}

func (o ConsulSnapshotMapOutput) ToConsulSnapshotMapOutput() ConsulSnapshotMapOutput {
	return o
}

func (o ConsulSnapshotMapOutput) ToConsulSnapshotMapOutputWithContext(ctx context.Context) ConsulSnapshotMapOutput {
	return o
}

func (o ConsulSnapshotMapOutput) MapIndex(k pulumi.StringInput) ConsulSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsulSnapshot {
		return vs[0].(map[string]*ConsulSnapshot)[vs[1].(string)]
	}).(ConsulSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsulSnapshotInput)(nil)).Elem(), &ConsulSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsulSnapshotArrayInput)(nil)).Elem(), ConsulSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsulSnapshotMapInput)(nil)).Elem(), ConsulSnapshotMap{})
	pulumi.RegisterOutputType(ConsulSnapshotOutput{})
	pulumi.RegisterOutputType(ConsulSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ConsulSnapshotMapOutput{})
}

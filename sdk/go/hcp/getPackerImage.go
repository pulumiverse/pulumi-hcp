// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id or a channel.
//
// ## Example Usage
// ### Single image sourcing
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-hcp/sdk/go/hcp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			baz, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
//				BucketName:    "hardened-ubuntu-16-04",
//				CloudProvider: "aws",
//				Channel:       pulumi.StringRef("production"),
//				Region:        "us-east-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("packer-registry-ubuntu-east-1", baz.CloudImageId)
//			return nil
//		})
//	}
//
// ```
//
// > **Note:** The `channel` attribute in this data source may incur a billable request to HCP Packer. This attribute is intended for convenience when using a single image. When sourcing multiple images from a single iteration, the `getPackerIteration` data source is the alternative for querying a channel just once.
// ### Multiple image sourcing from a single iteration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-hcp/sdk/go/hcp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			hardened_source, err := hcp.GetPackerIteration(ctx, &GetPackerIterationArgs{
//				BucketName: "hardened-ubuntu-16-04",
//				Channel:    "production",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			foo, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
//				BucketName:    "hardened-ubuntu-16-04",
//				CloudProvider: "aws",
//				IterationId:   pulumi.StringRef(hardened_source.Ulid),
//				Region:        "us-east-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			bar, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
//				BucketName:    "hardened-ubuntu-16-04",
//				CloudProvider: "aws",
//				IterationId:   pulumi.StringRef(hardened_source.Ulid),
//				Region:        "us-west-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("packer-registry-ubuntu-east-1", foo.CloudImageId)
//			ctx.Export("packer-registry-ubuntu-west-1", bar.CloudImageId)
//			return nil
//		})
//	}
//
// ```
//
// > **Note:** This data source only returns the first found image's metadata filtered by the given arguments, from the returned list of images associated with the specified iteration. Therefore, if multiple images exist in the same region, it will only pick one of them. In this case, you can filter images by a source build name (Ex: `amazon-ebs.example`) using the `componentType` optional argument.
func GetPackerImage(ctx *pulumi.Context, args *GetPackerImageArgs, opts ...pulumi.InvokeOption) (*GetPackerImageResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPackerImageResult
	err := ctx.Invoke("hcp:index/getPackerImage:getPackerImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPackerImage.
type GetPackerImageArgs struct {
	// The slug of the HCP Packer Registry image bucket to pull from.
	BucketName string `pulumi:"bucketName"`
	// The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
	Channel *string `pulumi:"channel"`
	// Name of the cloud provider this image is stored-in.
	CloudProvider string `pulumi:"cloudProvider"`
	// Name of the builder that built this image. Ex: `amazon-ebs.example`.
	ComponentType *string `pulumi:"componentType"`
	// The iteration from which to get the image. Either this or `channel` must be specified.
	IterationId *string `pulumi:"iterationId"`
	// Region this image is stored in, if any.
	Region string `pulumi:"region"`
}

// A collection of values returned by getPackerImage.
type GetPackerImageResult struct {
	// The slug of the HCP Packer Registry image bucket to pull from.
	BucketName string `pulumi:"bucketName"`
	// HCP ID of this build.
	BuildId string `pulumi:"buildId"`
	// The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
	Channel *string `pulumi:"channel"`
	// Cloud Image ID or URL string identifying this image for the builder that built it.
	CloudImageId string `pulumi:"cloudImageId"`
	// Name of the cloud provider this image is stored-in.
	CloudProvider string `pulumi:"cloudProvider"`
	// Name of the builder that built this image. Ex: `amazon-ebs.example`.
	ComponentType string `pulumi:"componentType"`
	// Creation time of this build.
	CreatedAt string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The iteration from which to get the image. Either this or `channel` must be specified.
	IterationId string `pulumi:"iterationId"`
	// Labels associated with this build.
	Labels map[string]interface{} `pulumi:"labels"`
	// The ID of the organization this HCP Packer registry is located in.
	OrganizationId string `pulumi:"organizationId"`
	// UUID of this build.
	PackerRunUuid string `pulumi:"packerRunUuid"`
	// The ID of the project this HCP Packer registry is located in.
	ProjectId string `pulumi:"projectId"`
	// Region this image is stored in, if any.
	Region string `pulumi:"region"`
	// The revocation time of this build. This field will be null for any build that has not been revoked or scheduled for revocation.
	RevokeAt string `pulumi:"revokeAt"`
}

func GetPackerImageOutput(ctx *pulumi.Context, args GetPackerImageOutputArgs, opts ...pulumi.InvokeOption) GetPackerImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPackerImageResult, error) {
			args := v.(GetPackerImageArgs)
			r, err := GetPackerImage(ctx, &args, opts...)
			var s GetPackerImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPackerImageResultOutput)
}

// A collection of arguments for invoking getPackerImage.
type GetPackerImageOutputArgs struct {
	// The slug of the HCP Packer Registry image bucket to pull from.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// Name of the cloud provider this image is stored-in.
	CloudProvider pulumi.StringInput `pulumi:"cloudProvider"`
	// Name of the builder that built this image. Ex: `amazon-ebs.example`.
	ComponentType pulumi.StringPtrInput `pulumi:"componentType"`
	// The iteration from which to get the image. Either this or `channel` must be specified.
	IterationId pulumi.StringPtrInput `pulumi:"iterationId"`
	// Region this image is stored in, if any.
	Region pulumi.StringInput `pulumi:"region"`
}

func (GetPackerImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackerImageArgs)(nil)).Elem()
}

// A collection of values returned by getPackerImage.
type GetPackerImageResultOutput struct{ *pulumi.OutputState }

func (GetPackerImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackerImageResult)(nil)).Elem()
}

func (o GetPackerImageResultOutput) ToGetPackerImageResultOutput() GetPackerImageResultOutput {
	return o
}

func (o GetPackerImageResultOutput) ToGetPackerImageResultOutputWithContext(ctx context.Context) GetPackerImageResultOutput {
	return o
}

// The slug of the HCP Packer Registry image bucket to pull from.
func (o GetPackerImageResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// HCP ID of this build.
func (o GetPackerImageResultOutput) BuildId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.BuildId }).(pulumi.StringOutput)
}

// The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
func (o GetPackerImageResultOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPackerImageResult) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// Cloud Image ID or URL string identifying this image for the builder that built it.
func (o GetPackerImageResultOutput) CloudImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CloudImageId }).(pulumi.StringOutput)
}

// Name of the cloud provider this image is stored-in.
func (o GetPackerImageResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

// Name of the builder that built this image. Ex: `amazon-ebs.example`.
func (o GetPackerImageResultOutput) ComponentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.ComponentType }).(pulumi.StringOutput)
}

// Creation time of this build.
func (o GetPackerImageResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPackerImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The iteration from which to get the image. Either this or `channel` must be specified.
func (o GetPackerImageResultOutput) IterationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.IterationId }).(pulumi.StringOutput)
}

// Labels associated with this build.
func (o GetPackerImageResultOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetPackerImageResult) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

// The ID of the organization this HCP Packer registry is located in.
func (o GetPackerImageResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

// UUID of this build.
func (o GetPackerImageResultOutput) PackerRunUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.PackerRunUuid }).(pulumi.StringOutput)
}

// The ID of the project this HCP Packer registry is located in.
func (o GetPackerImageResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Region this image is stored in, if any.
func (o GetPackerImageResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.Region }).(pulumi.StringOutput)
}

// The revocation time of this build. This field will be null for any build that has not been revoked or scheduled for revocation.
func (o GetPackerImageResultOutput) RevokeAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.RevokeAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPackerImageResultOutput{})
}

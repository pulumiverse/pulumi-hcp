# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'VaultClusterAuditLogConfigArgs',
    'VaultClusterMajorVersionUpgradeConfigArgs',
    'VaultClusterMetricsConfigArgs',
    'GetVaultClusterAuditLogConfigArgs',
    'GetVaultClusterMetricsConfigArgs',
]

@pulumi.input_type
class VaultClusterAuditLogConfigArgs:
    def __init__(__self__, *,
                 datadog_api_key: Optional[pulumi.Input[str]] = None,
                 datadog_region: Optional[pulumi.Input[str]] = None,
                 grafana_endpoint: Optional[pulumi.Input[str]] = None,
                 grafana_password: Optional[pulumi.Input[str]] = None,
                 grafana_user: Optional[pulumi.Input[str]] = None,
                 splunk_hecendpoint: Optional[pulumi.Input[str]] = None,
                 splunk_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datadog_api_key: Datadog api key for streaming audit logs
        :param pulumi.Input[str] datadog_region: Datadog region for streaming audit logs
        :param pulumi.Input[str] grafana_endpoint: Grafana endpoint for streaming audit logs
        :param pulumi.Input[str] grafana_password: Grafana password for streaming audit logs
        :param pulumi.Input[str] grafana_user: Grafana user for streaming audit logs
        :param pulumi.Input[str] splunk_hecendpoint: Splunk endpoint for streaming audit logs
        :param pulumi.Input[str] splunk_token: Splunk token for streaming audit logs
        """
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if datadog_region is not None:
            pulumi.set(__self__, "datadog_region", datadog_region)
        if grafana_endpoint is not None:
            pulumi.set(__self__, "grafana_endpoint", grafana_endpoint)
        if grafana_password is not None:
            pulumi.set(__self__, "grafana_password", grafana_password)
        if grafana_user is not None:
            pulumi.set(__self__, "grafana_user", grafana_user)
        if splunk_hecendpoint is not None:
            pulumi.set(__self__, "splunk_hecendpoint", splunk_hecendpoint)
        if splunk_token is not None:
            pulumi.set(__self__, "splunk_token", splunk_token)

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        Datadog api key for streaming audit logs
        """
        return pulumi.get(self, "datadog_api_key")

    @datadog_api_key.setter
    def datadog_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog_api_key", value)

    @property
    @pulumi.getter(name="datadogRegion")
    def datadog_region(self) -> Optional[pulumi.Input[str]]:
        """
        Datadog region for streaming audit logs
        """
        return pulumi.get(self, "datadog_region")

    @datadog_region.setter
    def datadog_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog_region", value)

    @property
    @pulumi.getter(name="grafanaEndpoint")
    def grafana_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana endpoint for streaming audit logs
        """
        return pulumi.get(self, "grafana_endpoint")

    @grafana_endpoint.setter
    def grafana_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_endpoint", value)

    @property
    @pulumi.getter(name="grafanaPassword")
    def grafana_password(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana password for streaming audit logs
        """
        return pulumi.get(self, "grafana_password")

    @grafana_password.setter
    def grafana_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_password", value)

    @property
    @pulumi.getter(name="grafanaUser")
    def grafana_user(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana user for streaming audit logs
        """
        return pulumi.get(self, "grafana_user")

    @grafana_user.setter
    def grafana_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_user", value)

    @property
    @pulumi.getter(name="splunkHecendpoint")
    def splunk_hecendpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Splunk endpoint for streaming audit logs
        """
        return pulumi.get(self, "splunk_hecendpoint")

    @splunk_hecendpoint.setter
    def splunk_hecendpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splunk_hecendpoint", value)

    @property
    @pulumi.getter(name="splunkToken")
    def splunk_token(self) -> Optional[pulumi.Input[str]]:
        """
        Splunk token for streaming audit logs
        """
        return pulumi.get(self, "splunk_token")

    @splunk_token.setter
    def splunk_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splunk_token", value)


@pulumi.input_type
class VaultClusterMajorVersionUpgradeConfigArgs:
    def __init__(__self__, *,
                 upgrade_type: pulumi.Input[str],
                 maintenance_window_day: Optional[pulumi.Input[str]] = None,
                 maintenance_window_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] upgrade_type: The major upgrade type for the cluster. Valid options for upgrade type - `AUTOMATIC`, `SCHEDULED`, `MANUAL`
        :param pulumi.Input[str] maintenance_window_day: The maintenance day of the week for scheduled upgrades. Valid options for maintenance window day - `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`
        :param pulumi.Input[str] maintenance_window_time: The maintenance time frame for scheduled upgrades. Valid options for maintenance window time - `WINDOW_12AM_4AM`, `WINDOW_6AM_10AM`, `WINDOW_12PM_4PM`, `WINDOW_6PM_10PM`
        """
        pulumi.set(__self__, "upgrade_type", upgrade_type)
        if maintenance_window_day is not None:
            pulumi.set(__self__, "maintenance_window_day", maintenance_window_day)
        if maintenance_window_time is not None:
            pulumi.set(__self__, "maintenance_window_time", maintenance_window_time)

    @property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> pulumi.Input[str]:
        """
        The major upgrade type for the cluster. Valid options for upgrade type - `AUTOMATIC`, `SCHEDULED`, `MANUAL`
        """
        return pulumi.get(self, "upgrade_type")

    @upgrade_type.setter
    def upgrade_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "upgrade_type", value)

    @property
    @pulumi.getter(name="maintenanceWindowDay")
    def maintenance_window_day(self) -> Optional[pulumi.Input[str]]:
        """
        The maintenance day of the week for scheduled upgrades. Valid options for maintenance window day - `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`, `SATURDAY`, `SUNDAY`
        """
        return pulumi.get(self, "maintenance_window_day")

    @maintenance_window_day.setter
    def maintenance_window_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_day", value)

    @property
    @pulumi.getter(name="maintenanceWindowTime")
    def maintenance_window_time(self) -> Optional[pulumi.Input[str]]:
        """
        The maintenance time frame for scheduled upgrades. Valid options for maintenance window time - `WINDOW_12AM_4AM`, `WINDOW_6AM_10AM`, `WINDOW_12PM_4PM`, `WINDOW_6PM_10PM`
        """
        return pulumi.get(self, "maintenance_window_time")

    @maintenance_window_time.setter
    def maintenance_window_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maintenance_window_time", value)


@pulumi.input_type
class VaultClusterMetricsConfigArgs:
    def __init__(__self__, *,
                 datadog_api_key: Optional[pulumi.Input[str]] = None,
                 datadog_region: Optional[pulumi.Input[str]] = None,
                 grafana_endpoint: Optional[pulumi.Input[str]] = None,
                 grafana_password: Optional[pulumi.Input[str]] = None,
                 grafana_user: Optional[pulumi.Input[str]] = None,
                 splunk_hecendpoint: Optional[pulumi.Input[str]] = None,
                 splunk_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datadog_api_key: Datadog api key for streaming metrics
        :param pulumi.Input[str] datadog_region: Datadog region for streaming metrics
        :param pulumi.Input[str] grafana_endpoint: Grafana endpoint for streaming metrics
        :param pulumi.Input[str] grafana_password: Grafana password for streaming metrics
        :param pulumi.Input[str] grafana_user: Grafana user for streaming metrics
        :param pulumi.Input[str] splunk_hecendpoint: Splunk endpoint for streaming metrics
        :param pulumi.Input[str] splunk_token: Splunk token for streaming metrics
        """
        if datadog_api_key is not None:
            pulumi.set(__self__, "datadog_api_key", datadog_api_key)
        if datadog_region is not None:
            pulumi.set(__self__, "datadog_region", datadog_region)
        if grafana_endpoint is not None:
            pulumi.set(__self__, "grafana_endpoint", grafana_endpoint)
        if grafana_password is not None:
            pulumi.set(__self__, "grafana_password", grafana_password)
        if grafana_user is not None:
            pulumi.set(__self__, "grafana_user", grafana_user)
        if splunk_hecendpoint is not None:
            pulumi.set(__self__, "splunk_hecendpoint", splunk_hecendpoint)
        if splunk_token is not None:
            pulumi.set(__self__, "splunk_token", splunk_token)

    @property
    @pulumi.getter(name="datadogApiKey")
    def datadog_api_key(self) -> Optional[pulumi.Input[str]]:
        """
        Datadog api key for streaming metrics
        """
        return pulumi.get(self, "datadog_api_key")

    @datadog_api_key.setter
    def datadog_api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog_api_key", value)

    @property
    @pulumi.getter(name="datadogRegion")
    def datadog_region(self) -> Optional[pulumi.Input[str]]:
        """
        Datadog region for streaming metrics
        """
        return pulumi.get(self, "datadog_region")

    @datadog_region.setter
    def datadog_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datadog_region", value)

    @property
    @pulumi.getter(name="grafanaEndpoint")
    def grafana_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana endpoint for streaming metrics
        """
        return pulumi.get(self, "grafana_endpoint")

    @grafana_endpoint.setter
    def grafana_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_endpoint", value)

    @property
    @pulumi.getter(name="grafanaPassword")
    def grafana_password(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana password for streaming metrics
        """
        return pulumi.get(self, "grafana_password")

    @grafana_password.setter
    def grafana_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_password", value)

    @property
    @pulumi.getter(name="grafanaUser")
    def grafana_user(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana user for streaming metrics
        """
        return pulumi.get(self, "grafana_user")

    @grafana_user.setter
    def grafana_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grafana_user", value)

    @property
    @pulumi.getter(name="splunkHecendpoint")
    def splunk_hecendpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Splunk endpoint for streaming metrics
        """
        return pulumi.get(self, "splunk_hecendpoint")

    @splunk_hecendpoint.setter
    def splunk_hecendpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splunk_hecendpoint", value)

    @property
    @pulumi.getter(name="splunkToken")
    def splunk_token(self) -> Optional[pulumi.Input[str]]:
        """
        Splunk token for streaming metrics
        """
        return pulumi.get(self, "splunk_token")

    @splunk_token.setter
    def splunk_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "splunk_token", value)


@pulumi.input_type
class GetVaultClusterAuditLogConfigArgs:
    def __init__(__self__, *,
                 datadog_region: str,
                 grafana_endpoint: str,
                 grafana_user: str,
                 splunk_hecendpoint: str):
        """
        :param str datadog_region: Datadog region for streaming audit logs
        :param str grafana_endpoint: Grafana endpoint for streaming audit logs
        :param str grafana_user: Grafana user for streaming audit logs
        :param str splunk_hecendpoint: Splunk endpoint for streaming audit logs
        """
        pulumi.set(__self__, "datadog_region", datadog_region)
        pulumi.set(__self__, "grafana_endpoint", grafana_endpoint)
        pulumi.set(__self__, "grafana_user", grafana_user)
        pulumi.set(__self__, "splunk_hecendpoint", splunk_hecendpoint)

    @property
    @pulumi.getter(name="datadogRegion")
    def datadog_region(self) -> str:
        """
        Datadog region for streaming audit logs
        """
        return pulumi.get(self, "datadog_region")

    @datadog_region.setter
    def datadog_region(self, value: str):
        pulumi.set(self, "datadog_region", value)

    @property
    @pulumi.getter(name="grafanaEndpoint")
    def grafana_endpoint(self) -> str:
        """
        Grafana endpoint for streaming audit logs
        """
        return pulumi.get(self, "grafana_endpoint")

    @grafana_endpoint.setter
    def grafana_endpoint(self, value: str):
        pulumi.set(self, "grafana_endpoint", value)

    @property
    @pulumi.getter(name="grafanaUser")
    def grafana_user(self) -> str:
        """
        Grafana user for streaming audit logs
        """
        return pulumi.get(self, "grafana_user")

    @grafana_user.setter
    def grafana_user(self, value: str):
        pulumi.set(self, "grafana_user", value)

    @property
    @pulumi.getter(name="splunkHecendpoint")
    def splunk_hecendpoint(self) -> str:
        """
        Splunk endpoint for streaming audit logs
        """
        return pulumi.get(self, "splunk_hecendpoint")

    @splunk_hecendpoint.setter
    def splunk_hecendpoint(self, value: str):
        pulumi.set(self, "splunk_hecendpoint", value)


@pulumi.input_type
class GetVaultClusterMetricsConfigArgs:
    def __init__(__self__, *,
                 datadog_region: str,
                 grafana_endpoint: str,
                 grafana_user: str,
                 splunk_hecendpoint: str):
        """
        :param str datadog_region: Datadog region for streaming metrics
        :param str grafana_endpoint: Grafana endpoint for streaming metrics
        :param str grafana_user: Grafana user for streaming metrics
        :param str splunk_hecendpoint: Splunk endpoint for streaming metrics
        """
        pulumi.set(__self__, "datadog_region", datadog_region)
        pulumi.set(__self__, "grafana_endpoint", grafana_endpoint)
        pulumi.set(__self__, "grafana_user", grafana_user)
        pulumi.set(__self__, "splunk_hecendpoint", splunk_hecendpoint)

    @property
    @pulumi.getter(name="datadogRegion")
    def datadog_region(self) -> str:
        """
        Datadog region for streaming metrics
        """
        return pulumi.get(self, "datadog_region")

    @datadog_region.setter
    def datadog_region(self, value: str):
        pulumi.set(self, "datadog_region", value)

    @property
    @pulumi.getter(name="grafanaEndpoint")
    def grafana_endpoint(self) -> str:
        """
        Grafana endpoint for streaming metrics
        """
        return pulumi.get(self, "grafana_endpoint")

    @grafana_endpoint.setter
    def grafana_endpoint(self, value: str):
        pulumi.set(self, "grafana_endpoint", value)

    @property
    @pulumi.getter(name="grafanaUser")
    def grafana_user(self) -> str:
        """
        Grafana user for streaming metrics
        """
        return pulumi.get(self, "grafana_user")

    @grafana_user.setter
    def grafana_user(self, value: str):
        pulumi.set(self, "grafana_user", value)

    @property
    @pulumi.getter(name="splunkHecendpoint")
    def splunk_hecendpoint(self) -> str:
        """
        Splunk endpoint for streaming metrics
        """
        return pulumi.get(self, "splunk_hecendpoint")

    @splunk_hecendpoint.setter
    def splunk_hecendpoint(self, value: str):
        pulumi.set(self, "splunk_hecendpoint", value)



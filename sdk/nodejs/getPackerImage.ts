// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id or a channel.
 *
 * ## Example Usage
 * ### Single image sourcing
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcp from "@pulumi/hcp";
 *
 * export = async () => {
 *     const baz = await hcp.getPackerImage({
 *         bucketName: "hardened-ubuntu-16-04",
 *         cloudProvider: "aws",
 *         channel: "production",
 *         region: "us-east-1",
 *     });
 *     const packer_registry_ubuntu_east_1 = baz.cloudImageId;
 *     return {
 *         "packer-registry-ubuntu-east-1": packer_registry_ubuntu_east_1,
 *     };
 * }
 * ```
 *
 * > **Note:** The `channel` attribute in this data source may incur a billable request to HCP Packer. This attribute is intended for convenience when using a single image. When sourcing multiple images from a single iteration, the `hcp.getPackerIteration` data source is the alternative for querying a channel just once.
 * ### Multiple image sourcing from a single iteration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcp from "@pulumi/hcp";
 *
 * export = async () => {
 *     const hardened-source = await hcp.getPackerIteration({
 *         bucketName: "hardened-ubuntu-16-04",
 *         channel: "production",
 *     });
 *     const foo = await hcp.getPackerImage({
 *         bucketName: "hardened-ubuntu-16-04",
 *         cloudProvider: "aws",
 *         iterationId: hardened_source.ulid,
 *         region: "us-east-1",
 *     });
 *     const bar = await hcp.getPackerImage({
 *         bucketName: "hardened-ubuntu-16-04",
 *         cloudProvider: "aws",
 *         iterationId: hardened_source.ulid,
 *         region: "us-west-1",
 *     });
 *     const packer_registry_ubuntu_east_1 = foo.cloudImageId;
 *     const packer_registry_ubuntu_west_1 = bar.cloudImageId;
 *     return {
 *         "packer-registry-ubuntu-east-1": packer_registry_ubuntu_east_1,
 *         "packer-registry-ubuntu-west-1": packer_registry_ubuntu_west_1,
 *     };
 * }
 * ```
 *
 * > **Note:** This data source only returns the first found image's metadata filtered by the given arguments, from the returned list of images associated with the specified iteration. Therefore, if multiple images exist in the same region, it will only pick one of them. In this case, you can filter images by a source build name (Ex: `amazon-ebs.example`) using the `componentType` optional argument.
 */
export function getPackerImage(args: GetPackerImageArgs, opts?: pulumi.InvokeOptions): Promise<GetPackerImageResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("hcp:index/getPackerImage:getPackerImage", {
        "bucketName": args.bucketName,
        "channel": args.channel,
        "cloudProvider": args.cloudProvider,
        "componentType": args.componentType,
        "iterationId": args.iterationId,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getPackerImage.
 */
export interface GetPackerImageArgs {
    /**
     * The slug of the HCP Packer Registry image bucket to pull from.
     */
    bucketName: string;
    /**
     * The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
     */
    channel?: string;
    /**
     * Name of the cloud provider this image is stored-in.
     */
    cloudProvider: string;
    /**
     * Name of the builder that built this image. Ex: `amazon-ebs.example`.
     */
    componentType?: string;
    /**
     * The iteration from which to get the image. Either this or `channel` must be specified.
     */
    iterationId?: string;
    /**
     * Region this image is stored in, if any.
     */
    region: string;
}

/**
 * A collection of values returned by getPackerImage.
 */
export interface GetPackerImageResult {
    /**
     * The slug of the HCP Packer Registry image bucket to pull from.
     */
    readonly bucketName: string;
    /**
     * HCP ID of this build.
     */
    readonly buildId: string;
    /**
     * The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
     */
    readonly channel?: string;
    /**
     * Cloud Image ID or URL string identifying this image for the builder that built it.
     */
    readonly cloudImageId: string;
    /**
     * Name of the cloud provider this image is stored-in.
     */
    readonly cloudProvider: string;
    /**
     * Name of the builder that built this image. Ex: `amazon-ebs.example`.
     */
    readonly componentType: string;
    /**
     * Creation time of this build.
     */
    readonly createdAt: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The iteration from which to get the image. Either this or `channel` must be specified.
     */
    readonly iterationId: string;
    /**
     * Labels associated with this build.
     */
    readonly labels: {[key: string]: any};
    /**
     * The ID of the organization this HCP Packer registry is located in.
     */
    readonly organizationId: string;
    /**
     * UUID of this build.
     */
    readonly packerRunUuid: string;
    /**
     * The ID of the project this HCP Packer registry is located in.
     */
    readonly projectId: string;
    /**
     * Region this image is stored in, if any.
     */
    readonly region: string;
    /**
     * The revocation time of this build. This field will be null for any build that has not been revoked or scheduled for revocation.
     */
    readonly revokeAt: string;
}

export function getPackerImageOutput(args: GetPackerImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPackerImageResult> {
    return pulumi.output(args).apply(a => getPackerImage(a, opts))
}

/**
 * A collection of arguments for invoking getPackerImage.
 */
export interface GetPackerImageOutputArgs {
    /**
     * The slug of the HCP Packer Registry image bucket to pull from.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The channel that points to the version of the image being retrieved. Either this or `iterationId` must be specified. Note: will incur a billable request
     */
    channel?: pulumi.Input<string>;
    /**
     * Name of the cloud provider this image is stored-in.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Name of the builder that built this image. Ex: `amazon-ebs.example`.
     */
    componentType?: pulumi.Input<string>;
    /**
     * The iteration from which to get the image. Either this or `channel` must be specified.
     */
    iterationId?: pulumi.Input<string>;
    /**
     * Region this image is stored in, if any.
     */
    region: pulumi.Input<string>;
}

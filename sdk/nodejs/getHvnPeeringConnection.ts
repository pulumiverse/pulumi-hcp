// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The HVN peering connection data source provides information about an existing peering connection between HVNs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcp from "@pulumi/hcp";
 *
 * const test = hcp.getHvnPeeringConnection({
 *     peeringId: _var.peering_id,
 *     hvn1: _var.hvn_1,
 *     hvn2: _var.hvn_2,
 * });
 * ```
 */
export function getHvnPeeringConnection(args: GetHvnPeeringConnectionArgs, opts?: pulumi.InvokeOptions): Promise<GetHvnPeeringConnectionResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("hcp:index/getHvnPeeringConnection:getHvnPeeringConnection", {
        "hvn1": args.hvn1,
        "hvn2": args.hvn2,
        "peeringId": args.peeringId,
    }, opts);
}

/**
 * A collection of arguments for invoking getHvnPeeringConnection.
 */
export interface GetHvnPeeringConnectionArgs {
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn1: string;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn2: string;
    /**
     * The ID of the peering connection.
     */
    peeringId: string;
}

/**
 * A collection of values returned by getHvnPeeringConnection.
 */
export interface GetHvnPeeringConnectionResult {
    /**
     * The time that the peering connection was created.
     */
    readonly createdAt: string;
    /**
     * The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
     */
    readonly expiresAt: string;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    readonly hvn1: string;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    readonly hvn2: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the HCP organization where the peering connection is located. Always matches the HVNs' organization.
     */
    readonly organizationId: string;
    /**
     * The ID of the peering connection.
     */
    readonly peeringId: string;
    /**
     * The ID of the HCP project where the peering connection is located. Always matches the HVNs' project.
     */
    readonly projectId: string;
    /**
     * A unique URL identifying the peering connection
     */
    readonly selfLink: string;
    /**
     * The state of the HVN peering connection.
     */
    readonly state: string;
}

export function getHvnPeeringConnectionOutput(args: GetHvnPeeringConnectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHvnPeeringConnectionResult> {
    return pulumi.output(args).apply(a => getHvnPeeringConnection(a, opts))
}

/**
 * A collection of arguments for invoking getHvnPeeringConnection.
 */
export interface GetHvnPeeringConnectionOutputArgs {
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn1: pulumi.Input<string>;
    /**
     * The unique URL of one of the HVNs being peered.
     */
    hvn2: pulumi.Input<string>;
    /**
     * The ID of the peering connection.
     */
    peeringId: pulumi.Input<string>;
}

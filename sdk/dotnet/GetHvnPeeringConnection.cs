// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Hcp
{
    public static class GetHvnPeeringConnection
    {
        /// <summary>
        /// The HVN peering connection data source provides information about an existing peering connection between HVNs.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Hcp.GetHvnPeeringConnection.Invoke(new()
        ///     {
        ///         PeeringId = @var.Peering_id,
        ///         Hvn1 = @var.Hvn_1,
        ///         Hvn2 = @var.Hvn_2,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetHvnPeeringConnectionResult> InvokeAsync(GetHvnPeeringConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHvnPeeringConnectionResult>("hcp:index/getHvnPeeringConnection:getHvnPeeringConnection", args ?? new GetHvnPeeringConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// The HVN peering connection data source provides information about an existing peering connection between HVNs.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Hcp.GetHvnPeeringConnection.Invoke(new()
        ///     {
        ///         PeeringId = @var.Peering_id,
        ///         Hvn1 = @var.Hvn_1,
        ///         Hvn2 = @var.Hvn_2,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetHvnPeeringConnectionResult> Invoke(GetHvnPeeringConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHvnPeeringConnectionResult>("hcp:index/getHvnPeeringConnection:getHvnPeeringConnection", args ?? new GetHvnPeeringConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHvnPeeringConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn1", required: true)]
        public string Hvn1 { get; set; } = null!;

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn2", required: true)]
        public string Hvn2 { get; set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId", required: true)]
        public string PeeringId { get; set; } = null!;

        public GetHvnPeeringConnectionArgs()
        {
        }
        public static new GetHvnPeeringConnectionArgs Empty => new GetHvnPeeringConnectionArgs();
    }

    public sealed class GetHvnPeeringConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn1", required: true)]
        public Input<string> Hvn1 { get; set; } = null!;

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn2", required: true)]
        public Input<string> Hvn2 { get; set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId", required: true)]
        public Input<string> PeeringId { get; set; } = null!;

        public GetHvnPeeringConnectionInvokeArgs()
        {
        }
        public static new GetHvnPeeringConnectionInvokeArgs Empty => new GetHvnPeeringConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetHvnPeeringConnectionResult
    {
        /// <summary>
        /// The time that the peering connection was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        public readonly string Hvn1;
        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        public readonly string Hvn2;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the HCP organization where the peering connection is located. Always matches the HVNs' organization.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        public readonly string PeeringId;
        /// <summary>
        /// The ID of the HCP project where the peering connection is located. Always matches the HVNs' project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// A unique URL identifying the peering connection
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The state of the HVN peering connection.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetHvnPeeringConnectionResult(
            string createdAt,

            string expiresAt,

            string hvn1,

            string hvn2,

            string id,

            string organizationId,

            string peeringId,

            string projectId,

            string selfLink,

            string state)
        {
            CreatedAt = createdAt;
            ExpiresAt = expiresAt;
            Hvn1 = hvn1;
            Hvn2 = hvn2;
            Id = id;
            OrganizationId = organizationId;
            PeeringId = peeringId;
            ProjectId = projectId;
            SelfLink = selfLink;
            State = state;
        }
    }
}

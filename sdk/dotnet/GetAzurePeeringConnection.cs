// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Hcp
{
    public static class GetAzurePeeringConnection
    {
        /// <summary>
        /// &gt; **Note:** This data source is currently in public beta.
        /// 
        /// The Azure peering connection data source provides information about a peering connection between an HVN and a peer Azure VNet.
        /// </summary>
        public static Task<GetAzurePeeringConnectionResult> InvokeAsync(GetAzurePeeringConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAzurePeeringConnectionResult>("hcp:index/getAzurePeeringConnection:getAzurePeeringConnection", args ?? new GetAzurePeeringConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Note:** This data source is currently in public beta.
        /// 
        /// The Azure peering connection data source provides information about a peering connection between an HVN and a peer Azure VNet.
        /// </summary>
        public static Output<GetAzurePeeringConnectionResult> Invoke(GetAzurePeeringConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAzurePeeringConnectionResult>("hcp:index/getAzurePeeringConnection:getAzurePeeringConnection", args ?? new GetAzurePeeringConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAzurePeeringConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The `self_link` of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Input("hvnLink", required: true)]
        public string HvnLink { get; set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId", required: true)]
        public string PeeringId { get; set; } = null!;

        [Input("waitForActiveState")]
        public bool? WaitForActiveState { get; set; }

        public GetAzurePeeringConnectionArgs()
        {
        }
        public static new GetAzurePeeringConnectionArgs Empty => new GetAzurePeeringConnectionArgs();
    }

    public sealed class GetAzurePeeringConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The `self_link` of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Input("hvnLink", required: true)]
        public Input<string> HvnLink { get; set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId", required: true)]
        public Input<string> PeeringId { get; set; } = null!;

        [Input("waitForActiveState")]
        public Input<bool>? WaitForActiveState { get; set; }

        public GetAzurePeeringConnectionInvokeArgs()
        {
        }
        public static new GetAzurePeeringConnectionInvokeArgs Empty => new GetAzurePeeringConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetAzurePeeringConnectionResult
    {
        /// <summary>
        /// The ID of the Azure application whose credentials are used to peer the HCP HVN's underlying VNet with the customer VNet.
        /// </summary>
        public readonly string ApplicationId;
        /// <summary>
        /// The peering connection ID used by Azure.
        /// </summary>
        public readonly string AzurePeeringId;
        /// <summary>
        /// The time that the peering connection was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The `self_link` of the HashiCorp Virtual Network (HVN).
        /// </summary>
        public readonly string HvnLink;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the HCP organization where the peering connection is located. Always matches the HVN's organization.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The resource group name of the peer VNet in Azure.
        /// </summary>
        public readonly string PeerResourceGroupName;
        /// <summary>
        /// The subscription ID of the peer VNet in Azure.
        /// </summary>
        public readonly string PeerSubscriptionId;
        /// <summary>
        /// The tenant ID of the peer VNet in Azure.
        /// </summary>
        public readonly string PeerTenantId;
        /// <summary>
        /// The name of the peer VNet in Azure.
        /// </summary>
        public readonly string PeerVnetName;
        /// <summary>
        /// The region of the peer VNet in Azure.
        /// </summary>
        public readonly string PeerVnetRegion;
        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        public readonly string PeeringId;
        /// <summary>
        /// The ID of the HCP project where the peering connection is located. Always matches the HVN's project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// A unique URL identifying the peering connection
        /// </summary>
        public readonly string SelfLink;
        /// <summary>
        /// The state of the Azure peering connection.
        /// </summary>
        public readonly string State;
        public readonly bool? WaitForActiveState;

        [OutputConstructor]
        private GetAzurePeeringConnectionResult(
            string applicationId,

            string azurePeeringId,

            string createdAt,

            string expiresAt,

            string hvnLink,

            string id,

            string organizationId,

            string peerResourceGroupName,

            string peerSubscriptionId,

            string peerTenantId,

            string peerVnetName,

            string peerVnetRegion,

            string peeringId,

            string projectId,

            string selfLink,

            string state,

            bool? waitForActiveState)
        {
            ApplicationId = applicationId;
            AzurePeeringId = azurePeeringId;
            CreatedAt = createdAt;
            ExpiresAt = expiresAt;
            HvnLink = hvnLink;
            Id = id;
            OrganizationId = organizationId;
            PeerResourceGroupName = peerResourceGroupName;
            PeerSubscriptionId = peerSubscriptionId;
            PeerTenantId = peerTenantId;
            PeerVnetName = peerVnetName;
            PeerVnetRegion = peerVnetRegion;
            PeeringId = peeringId;
            ProjectId = projectId;
            SelfLink = selfLink;
            State = state;
            WaitForActiveState = waitForActiveState;
        }
    }
}

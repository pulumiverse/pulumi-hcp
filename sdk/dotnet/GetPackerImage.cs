// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Hcp
{
    public static class GetPackerImage
    {
        /// <summary>
        /// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id or a channel.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Single image sourcing
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var baz = Hcp.GetPackerImage.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         CloudProvider = "aws",
        ///         Channel = "production",
        ///         Region = "us-east-1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["packer-registry-ubuntu-east-1"] = baz.Apply(getPackerImageResult =&gt; getPackerImageResult.CloudImageId),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note:** The `channel` attribute in this data source may incur a billable request to HCP Packer. This attribute is intended for convenience when using a single image. When sourcing multiple images from a single iteration, the `hcp.getPackerIteration` data source is the alternative for querying a channel just once.
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Multiple image sourcing from a single iteration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var hardened_source = Hcp.GetPackerIteration.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         Channel = "production",
        ///     });
        /// 
        ///     var foo = Hcp.GetPackerImage.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         CloudProvider = "aws",
        ///         IterationId = hardened_source.Apply(getPackerIterationResult =&gt; getPackerIterationResult.Ulid),
        ///         Region = "us-east-1",
        ///     });
        /// 
        ///     var bar = Hcp.GetPackerImage.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         CloudProvider = "aws",
        ///         IterationId = hardened_source.Apply(getPackerIterationResult =&gt; getPackerIterationResult.Ulid),
        ///         Region = "us-west-1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["packer-registry-ubuntu-east-1"] = foo.Apply(getPackerImageResult =&gt; getPackerImageResult.CloudImageId),
        ///         ["packer-registry-ubuntu-west-1"] = bar.Apply(getPackerImageResult =&gt; getPackerImageResult.CloudImageId),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note:** This data source only returns the first found image's metadata filtered by the given arguments, from the returned list of images associated with the specified iteration. Therefore, if multiple images exist in the same region, it will only pick one of them. In this case, you can filter images by a source build name (Ex: `amazon-ebs.example`) using the `component_type` optional argument.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPackerImageResult> InvokeAsync(GetPackerImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPackerImageResult>("hcp:index/getPackerImage:getPackerImage", args ?? new GetPackerImageArgs(), options.WithDefaults());

        /// <summary>
        /// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id or a channel.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Single image sourcing
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var baz = Hcp.GetPackerImage.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         CloudProvider = "aws",
        ///         Channel = "production",
        ///         Region = "us-east-1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["packer-registry-ubuntu-east-1"] = baz.Apply(getPackerImageResult =&gt; getPackerImageResult.CloudImageId),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note:** The `channel` attribute in this data source may incur a billable request to HCP Packer. This attribute is intended for convenience when using a single image. When sourcing multiple images from a single iteration, the `hcp.getPackerIteration` data source is the alternative for querying a channel just once.
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Multiple image sourcing from a single iteration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var hardened_source = Hcp.GetPackerIteration.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         Channel = "production",
        ///     });
        /// 
        ///     var foo = Hcp.GetPackerImage.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         CloudProvider = "aws",
        ///         IterationId = hardened_source.Apply(getPackerIterationResult =&gt; getPackerIterationResult.Ulid),
        ///         Region = "us-east-1",
        ///     });
        /// 
        ///     var bar = Hcp.GetPackerImage.Invoke(new()
        ///     {
        ///         BucketName = "hardened-ubuntu-16-04",
        ///         CloudProvider = "aws",
        ///         IterationId = hardened_source.Apply(getPackerIterationResult =&gt; getPackerIterationResult.Ulid),
        ///         Region = "us-west-1",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["packer-registry-ubuntu-east-1"] = foo.Apply(getPackerImageResult =&gt; getPackerImageResult.CloudImageId),
        ///         ["packer-registry-ubuntu-west-1"] = bar.Apply(getPackerImageResult =&gt; getPackerImageResult.CloudImageId),
        ///     };
        /// });
        /// ```
        /// 
        /// &gt; **Note:** This data source only returns the first found image's metadata filtered by the given arguments, from the returned list of images associated with the specified iteration. Therefore, if multiple images exist in the same region, it will only pick one of them. In this case, you can filter images by a source build name (Ex: `amazon-ebs.example`) using the `component_type` optional argument.
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPackerImageResult> Invoke(GetPackerImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPackerImageResult>("hcp:index/getPackerImage:getPackerImage", args ?? new GetPackerImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPackerImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        /// <summary>
        /// The channel that points to the version of the image being retrieved. Either this or `iteration_id` must be specified. Note: will incur a billable request
        /// </summary>
        [Input("channel")]
        public string? Channel { get; set; }

        /// <summary>
        /// Name of the cloud provider this image is stored-in.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public string CloudProvider { get; set; } = null!;

        /// <summary>
        /// Name of the builder that built this image. Ex: `amazon-ebs.example`.
        /// </summary>
        [Input("componentType")]
        public string? ComponentType { get; set; }

        /// <summary>
        /// The iteration from which to get the image. Either this or `channel` must be specified.
        /// </summary>
        [Input("iterationId")]
        public string? IterationId { get; set; }

        /// <summary>
        /// Region this image is stored in, if any.
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetPackerImageArgs()
        {
        }
        public static new GetPackerImageArgs Empty => new GetPackerImageArgs();
    }

    public sealed class GetPackerImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The channel that points to the version of the image being retrieved. Either this or `iteration_id` must be specified. Note: will incur a billable request
        /// </summary>
        [Input("channel")]
        public Input<string>? Channel { get; set; }

        /// <summary>
        /// Name of the cloud provider this image is stored-in.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// Name of the builder that built this image. Ex: `amazon-ebs.example`.
        /// </summary>
        [Input("componentType")]
        public Input<string>? ComponentType { get; set; }

        /// <summary>
        /// The iteration from which to get the image. Either this or `channel` must be specified.
        /// </summary>
        [Input("iterationId")]
        public Input<string>? IterationId { get; set; }

        /// <summary>
        /// Region this image is stored in, if any.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetPackerImageInvokeArgs()
        {
        }
        public static new GetPackerImageInvokeArgs Empty => new GetPackerImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetPackerImageResult
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// HCP ID of this build.
        /// </summary>
        public readonly string BuildId;
        /// <summary>
        /// The channel that points to the version of the image being retrieved. Either this or `iteration_id` must be specified. Note: will incur a billable request
        /// </summary>
        public readonly string? Channel;
        /// <summary>
        /// Cloud Image ID or URL string identifying this image for the builder that built it.
        /// </summary>
        public readonly string CloudImageId;
        /// <summary>
        /// Name of the cloud provider this image is stored-in.
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// Name of the builder that built this image. Ex: `amazon-ebs.example`.
        /// </summary>
        public readonly string ComponentType;
        /// <summary>
        /// Creation time of this build.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The iteration from which to get the image. Either this or `channel` must be specified.
        /// </summary>
        public readonly string IterationId;
        /// <summary>
        /// Labels associated with this build.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// The ID of the organization this HCP Packer registry is located in.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// UUID of this build.
        /// </summary>
        public readonly string PackerRunUuid;
        /// <summary>
        /// The ID of the project this HCP Packer registry is located in.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Region this image is stored in, if any.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The revocation time of this build. This field will be null for any build that has not been revoked or scheduled for revocation.
        /// </summary>
        public readonly string RevokeAt;

        [OutputConstructor]
        private GetPackerImageResult(
            string bucketName,

            string buildId,

            string? channel,

            string cloudImageId,

            string cloudProvider,

            string componentType,

            string createdAt,

            string id,

            string iterationId,

            ImmutableDictionary<string, object> labels,

            string organizationId,

            string packerRunUuid,

            string projectId,

            string region,

            string revokeAt)
        {
            BucketName = bucketName;
            BuildId = buildId;
            Channel = channel;
            CloudImageId = cloudImageId;
            CloudProvider = cloudProvider;
            ComponentType = componentType;
            CreatedAt = createdAt;
            Id = id;
            IterationId = iterationId;
            Labels = labels;
            OrganizationId = organizationId;
            PackerRunUuid = packerRunUuid;
            ProjectId = projectId;
            Region = region;
            RevokeAt = revokeAt;
        }
    }
}

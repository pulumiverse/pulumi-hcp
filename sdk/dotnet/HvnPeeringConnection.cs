// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Hcp
{
    /// <summary>
    /// The HVN peering connection resource allows you to manage a peering connection between HVNs.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Hcp = Pulumiverse.Hcp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var hvn1 = new Hcp.Hvn("hvn1", new()
    ///     {
    ///         HvnId = "hvn-1",
    ///         CloudProvider = "aws",
    ///         Region = "us-west-2",
    ///         CidrBlock = "172.25.16.0/20",
    ///     });
    /// 
    ///     var hvn2 = new Hcp.Hvn("hvn2", new()
    ///     {
    ///         HvnId = "hvn-2",
    ///         CloudProvider = "aws",
    ///         Region = "us-west-2",
    ///         CidrBlock = "172.18.16.0/20",
    ///     });
    /// 
    ///     var peer1 = new Hcp.HvnPeeringConnection("peer1", new()
    ///     {
    ///         Hvn1 = hvn1.SelfLink,
    ///         Hvn2 = hvn2.SelfLink,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// # The import ID requires the first HVN ID in the format {hvn_1_id}:{peering_id}
    /// 
    /// ```sh
    ///  $ pulumi import hcp:index/hvnPeeringConnection:HvnPeeringConnection peer_1 hvn-1:peer-1
    /// ```
    /// </summary>
    [HcpResourceType("hcp:index/hvnPeeringConnection:HvnPeeringConnection")]
    public partial class HvnPeeringConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The time that the peering connection was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Output("hvn1")]
        public Output<string> Hvn1 { get; private set; } = null!;

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Output("hvn2")]
        public Output<string> Hvn2 { get; private set; } = null!;

        /// <summary>
        /// The ID of the HCP organization where the peering connection is located. Always matches the HVNs' organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Output("peeringId")]
        public Output<string> PeeringId { get; private set; } = null!;

        /// <summary>
        /// The ID of the HCP project where the peering connection is located. Always matches the HVNs' project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A unique URL identifying the peering connection
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The state of the HVN peering connection.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a HvnPeeringConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HvnPeeringConnection(string name, HvnPeeringConnectionArgs args, CustomResourceOptions? options = null)
            : base("hcp:index/hvnPeeringConnection:HvnPeeringConnection", name, args ?? new HvnPeeringConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HvnPeeringConnection(string name, Input<string> id, HvnPeeringConnectionState? state = null, CustomResourceOptions? options = null)
            : base("hcp:index/hvnPeeringConnection:HvnPeeringConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HvnPeeringConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HvnPeeringConnection Get(string name, Input<string> id, HvnPeeringConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new HvnPeeringConnection(name, id, state, options);
        }
    }

    public sealed class HvnPeeringConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn1", required: true)]
        public Input<string> Hvn1 { get; set; } = null!;

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn2", required: true)]
        public Input<string> Hvn2 { get; set; } = null!;

        public HvnPeeringConnectionArgs()
        {
        }
        public static new HvnPeeringConnectionArgs Empty => new HvnPeeringConnectionArgs();
    }

    public sealed class HvnPeeringConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The time that the peering connection was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn1")]
        public Input<string>? Hvn1 { get; set; }

        /// <summary>
        /// The unique URL of one of the HVNs being peered.
        /// </summary>
        [Input("hvn2")]
        public Input<string>? Hvn2 { get; set; }

        /// <summary>
        /// The ID of the HCP organization where the peering connection is located. Always matches the HVNs' organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId")]
        public Input<string>? PeeringId { get; set; }

        /// <summary>
        /// The ID of the HCP project where the peering connection is located. Always matches the HVNs' project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A unique URL identifying the peering connection
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The state of the HVN peering connection.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public HvnPeeringConnectionState()
        {
        }
        public static new HvnPeeringConnectionState Empty => new HvnPeeringConnectionState();
    }
}

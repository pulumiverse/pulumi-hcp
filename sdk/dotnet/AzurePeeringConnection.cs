// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Hcp
{
    /// <summary>
    /// &gt; **Note:** This data source is currently in public beta.
    /// 
    /// The Azure peering connection resource allows you to manage a peering connection between an HVN and a peer Azure VNet.
    /// 
    /// ## Import
    /// 
    /// # The import ID is {hvn_id}:{peering_id}
    /// 
    /// ```sh
    ///  $ pulumi import hcp:index/azurePeeringConnection:AzurePeeringConnection peer main-hvn:199e7e96-4d5f-4456-91f3-b6cc71f1e561
    /// ```
    /// </summary>
    [HcpResourceType("hcp:index/azurePeeringConnection:AzurePeeringConnection")]
    public partial class AzurePeeringConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Azure application whose credentials are used to peer the HCP HVN's underlying VNet with the customer VNet.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// The peering connection ID used by Azure.
        /// </summary>
        [Output("azurePeeringId")]
        public Output<string> AzurePeeringId { get; private set; } = null!;

        /// <summary>
        /// The time that the peering connection was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The `self_link` of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Output("hvnLink")]
        public Output<string> HvnLink { get; private set; } = null!;

        /// <summary>
        /// The ID of the HCP organization where the peering connection is located. Always matches the HVN's organization.
        /// </summary>
        [Output("organizationId")]
        public Output<string> OrganizationId { get; private set; } = null!;

        /// <summary>
        /// The resource group name of the peer VNet in Azure.
        /// </summary>
        [Output("peerResourceGroupName")]
        public Output<string> PeerResourceGroupName { get; private set; } = null!;

        /// <summary>
        /// The subscription ID of the peer VNet in Azure.
        /// </summary>
        [Output("peerSubscriptionId")]
        public Output<string> PeerSubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The tenant ID of the peer VNet in Azure.
        /// </summary>
        [Output("peerTenantId")]
        public Output<string> PeerTenantId { get; private set; } = null!;

        /// <summary>
        /// The name of the peer VNet in Azure.
        /// </summary>
        [Output("peerVnetName")]
        public Output<string> PeerVnetName { get; private set; } = null!;

        /// <summary>
        /// The region of the peer VNet in Azure.
        /// </summary>
        [Output("peerVnetRegion")]
        public Output<string> PeerVnetRegion { get; private set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Output("peeringId")]
        public Output<string> PeeringId { get; private set; } = null!;

        /// <summary>
        /// The ID of the HCP project where the peering connection is located. Always matches the HVN's project.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A unique URL identifying the peering connection.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// The state of the Azure peering connection.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a AzurePeeringConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AzurePeeringConnection(string name, AzurePeeringConnectionArgs args, CustomResourceOptions? options = null)
            : base("hcp:index/azurePeeringConnection:AzurePeeringConnection", name, args ?? new AzurePeeringConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AzurePeeringConnection(string name, Input<string> id, AzurePeeringConnectionState? state = null, CustomResourceOptions? options = null)
            : base("hcp:index/azurePeeringConnection:AzurePeeringConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AzurePeeringConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AzurePeeringConnection Get(string name, Input<string> id, AzurePeeringConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new AzurePeeringConnection(name, id, state, options);
        }
    }

    public sealed class AzurePeeringConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The `self_link` of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Input("hvnLink", required: true)]
        public Input<string> HvnLink { get; set; } = null!;

        /// <summary>
        /// The resource group name of the peer VNet in Azure.
        /// </summary>
        [Input("peerResourceGroupName", required: true)]
        public Input<string> PeerResourceGroupName { get; set; } = null!;

        /// <summary>
        /// The subscription ID of the peer VNet in Azure.
        /// </summary>
        [Input("peerSubscriptionId", required: true)]
        public Input<string> PeerSubscriptionId { get; set; } = null!;

        /// <summary>
        /// The tenant ID of the peer VNet in Azure.
        /// </summary>
        [Input("peerTenantId", required: true)]
        public Input<string> PeerTenantId { get; set; } = null!;

        /// <summary>
        /// The name of the peer VNet in Azure.
        /// </summary>
        [Input("peerVnetName", required: true)]
        public Input<string> PeerVnetName { get; set; } = null!;

        /// <summary>
        /// The region of the peer VNet in Azure.
        /// </summary>
        [Input("peerVnetRegion", required: true)]
        public Input<string> PeerVnetRegion { get; set; } = null!;

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId", required: true)]
        public Input<string> PeeringId { get; set; } = null!;

        public AzurePeeringConnectionArgs()
        {
        }
        public static new AzurePeeringConnectionArgs Empty => new AzurePeeringConnectionArgs();
    }

    public sealed class AzurePeeringConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Azure application whose credentials are used to peer the HCP HVN's underlying VNet with the customer VNet.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// The peering connection ID used by Azure.
        /// </summary>
        [Input("azurePeeringId")]
        public Input<string>? AzurePeeringId { get; set; }

        /// <summary>
        /// The time that the peering connection was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The time after which the peering connection will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The `self_link` of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Input("hvnLink")]
        public Input<string>? HvnLink { get; set; }

        /// <summary>
        /// The ID of the HCP organization where the peering connection is located. Always matches the HVN's organization.
        /// </summary>
        [Input("organizationId")]
        public Input<string>? OrganizationId { get; set; }

        /// <summary>
        /// The resource group name of the peer VNet in Azure.
        /// </summary>
        [Input("peerResourceGroupName")]
        public Input<string>? PeerResourceGroupName { get; set; }

        /// <summary>
        /// The subscription ID of the peer VNet in Azure.
        /// </summary>
        [Input("peerSubscriptionId")]
        public Input<string>? PeerSubscriptionId { get; set; }

        /// <summary>
        /// The tenant ID of the peer VNet in Azure.
        /// </summary>
        [Input("peerTenantId")]
        public Input<string>? PeerTenantId { get; set; }

        /// <summary>
        /// The name of the peer VNet in Azure.
        /// </summary>
        [Input("peerVnetName")]
        public Input<string>? PeerVnetName { get; set; }

        /// <summary>
        /// The region of the peer VNet in Azure.
        /// </summary>
        [Input("peerVnetRegion")]
        public Input<string>? PeerVnetRegion { get; set; }

        /// <summary>
        /// The ID of the peering connection.
        /// </summary>
        [Input("peeringId")]
        public Input<string>? PeeringId { get; set; }

        /// <summary>
        /// The ID of the HCP project where the peering connection is located. Always matches the HVN's project.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// A unique URL identifying the peering connection.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        /// <summary>
        /// The state of the Azure peering connection.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public AzurePeeringConnectionState()
        {
        }
        public static new AzurePeeringConnectionState Empty => new AzurePeeringConnectionState();
    }
}
